import os
import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
    CallbackQueryHandler
)
import pymongo
from bson.objectid import ObjectId

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Database setup
client = pymongo.MongoClient(os.getenv("MONGO_URI"))
db = client["terabot_db"]
users_col = db["users"]
downloads_col = db["downloads"]

# Bot configuration
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHANNEL_ID = "@botupdateshere"
ADMIN_ID = int(os.getenv("ADMIN_ID"))
TOKEN_DURATION = timedelta(hours=4)
REFERRAL_DURATION = timedelta(hours=8)

async def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    
    # Check if user exists
    user = users_col.find_one({"user_id": user_id})
    
    if not user:
        # New user registration
        is_referred = len(context.args) > 0 and context.args[0].startswith("_tgr_")
        
        users_col.insert_one({
            "user_id": user_id,
            "chat_id": chat_id,
            "join_date": datetime.now(),
            "is_member": False,
            "token_expiry": None,
            "is_referred": is_referred,
            "referral_code": f"ref_{user_id}",
            "referral_count": 0,
            "download_count": 0
        })
        
        # Send channel join prompt
        keyboard = [
            [InlineKeyboardButton("Join Channel", url=f"https://t.me/{CHANNEL_ID[1:]}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚ö†Ô∏è ‡§¨‡•â‡§ü ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§π‡§Æ‡§æ‡§∞‡•á ‡§ö‡•à‡§®‡§≤ ‡§∏‡•á ‡§ú‡•Å‡§°‡§º‡•á‡§Ç:",
            reply_markup=reply_markup
        )
    else:
        # Existing user - check membership
        if not user.get("is_member", False):
            await update.message.reply_text("‡§ï‡•É‡§™‡§Ø‡§æ ‡§ö‡•à‡§®‡§≤ ‡§∏‡•á ‡§ú‡•Å‡§°‡§º‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶ /start ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç")
        else:
            await send_welcome_message(update, user)

async def send_welcome_message(update: Update, user):
    user_id = user["user_id"]
    now = datetime.now()
    
    if user.get("token_expiry") and now < user["token_expiry"]:
        # Token still valid
        expiry_time = user["token_expiry"].strftime("%d/%m/%Y %I:%M %p")
        await update.message.reply_text(
            f"üéâ ‡§Ü‡§™‡§ï‡§æ ‡§ü‡•ã‡§ï‡§® {expiry_time} ‡§§‡§ï ‡§µ‡•à‡§ß ‡§π‡•à\n\n"
            "üì• ‡§ü‡•á‡§∞‡§æ‡§¨‡•â‡§ï‡•ç‡§∏ ‡§≤‡§ø‡§Ç‡§ï ‡§≠‡•á‡§ú‡§ï‡§∞ ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç"
        )
    else:
        # Generate new token
        duration = REFERRAL_DURATION if user.get("is_referred") else TOKEN_DURATION
        token_expiry = now + duration
        
        users_col.update_one(
            {"user_id": user_id},
            {"$set": {"token_expiry": token_expiry}}
        )
        
        expiry_time = token_expiry.strftime("%d/%m/%Y %I:%M %p")
        referral_link = f"https://t.me/{(await context.bot.get_me()).username}?start=ref_{user_id}"
        
        await update.message.reply_text(
            f"üîë ‡§Ü‡§™‡§ï‡•ã {duration.hours} ‡§ò‡§Ç‡§ü‡•á ‡§ï‡§æ ‡§ü‡•ã‡§ï‡§® ‡§Æ‡§ø‡§≤‡§æ ‡§π‡•à (‡§µ‡•à‡§ß ‡§§‡§ï: {expiry_time})\n\n"
            f"üì§ ‡§Ö‡§™‡§®‡§æ ‡§∞‡•á‡§´‡§∞‡§≤ ‡§≤‡§ø‡§Ç‡§ï: {referral_link}\n"
            "üöÄ ‡§Ö‡§¨ ‡§Ü‡§™ ‡§ü‡•á‡§∞‡§æ‡§¨‡•â‡§ï‡•ç‡§∏ ‡§≤‡§ø‡§Ç‡§ï ‡§≠‡•á‡§ú‡§ï‡§∞ ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç"
        )

async def check_membership(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    user = users_col.find_one({"user_id": user_id})
    
    if not user:
        await update.message.reply_text("‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡§π‡§≤‡•á /start ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç")
        return
    
    try:
        chat_member = await context.bot.get_chat_member(CHANNEL_ID, user_id)
        if chat_member.status in ["member", "administrator", "creator"]:
            users_col.update_one(
                {"user_id": user_id},
                {"$set": {"is_member": True}}
            )
            await send_welcome_message(update, user)
        else:
            await update.message.reply_text("‚ùå ‡§Ü‡§™ ‡§Ö‡§≠‡•Ä ‡§≠‡•Ä ‡§ö‡•à‡§®‡§≤ ‡§Æ‡•á‡§Ç‡§¨‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡§Ç")
    except Exception as e:
        logger.error(f"Error checking membership: {e}")
        await update.message.reply_text("‡§Æ‡•á‡§Ç‡§¨‡§∞‡§∂‡§ø‡§™ ‡§ö‡•á‡§ï ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø, ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç")

async def handle_download(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    user = users_col.find_one({"user_id": user_id})
    
    if not user or not user.get("is_member"):
        await update.message.reply_text("‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡§π‡§≤‡•á ‡§ö‡•à‡§®‡§≤ ‡§∏‡•á ‡§ú‡•Å‡§°‡§º‡•á‡§Ç ‡§î‡§∞ /start ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç")
        return
    
    if not user.get("token_expiry") or datetime.now() > user["token_expiry"]:
        await update.message.reply_text(
            "‚ö†Ô∏è ‡§Ü‡§™‡§ï‡§æ ‡§ü‡•ã‡§ï‡§® ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ ‡§π‡•ã ‡§ó‡§Ø‡§æ ‡§π‡•à\n\n"
            "üîÑ ‡§®‡§Ø‡§æ ‡§ü‡•ã‡§ï‡§® ‡§™‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è /start ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç"
        )
        return
    
    # Process download (simplified example)
    terabox_url = update.message.text
    download_url = "https://shrinkme.ink/XdxAjM"  # Replace with actual download logic
    
    # Save download record
    downloads_col.insert_one({
        "user_id": user_id,
        "terabox_url": terabox_url,
        "download_url": download_url,
        "timestamp": datetime.now()
    })
    
    # Send to admin
    await context.bot.send_message(
        ADMIN_ID,
        f"üì• ‡§®‡§Ø‡§æ ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§∞‡§ø‡§ï‡•ç‡§µ‡•á‡§∏‡•ç‡§ü\n\n"
        f"üë§ ‡§Ø‡•Ç‡§ú‡§∞: {user_id}\n"
        f"üîó ‡§≤‡§ø‡§Ç‡§ï: {terabox_url}"
    )
    
    # Send to user
    await update.message.reply_text(
        f"‚úÖ ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•à:\n\n{download_url}\n\n"
        "‚ö†Ô∏è ‡§Ø‡§π ‡§≤‡§ø‡§Ç‡§ï 24 ‡§ò‡§Ç‡§ü‡•á ‡§§‡§ï ‡§µ‡•à‡§ß ‡§∞‡§π‡•á‡§ó‡§æ"
    )

async def broadcast(update: Update, context: CallbackContext):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå ‡§Ö‡§®‡§ß‡§ø‡§ï‡•É‡§§ ‡§™‡§π‡•Å‡§Ç‡§ö")
        return
    
    message = " ".join(context.args)
    if not message:
        await update.message.reply_text("Usage: /broadcast <message>")
        return
    
    users = users_col.find({})
    count = 0
    for user in users:
        try:
            await context.bot.send_message(user["chat_id"], message)
            count += 1
        except Exception as e:
            logger.error(f"Failed to send to {user['user_id']}: {e}")
    
    await update.message.reply_text(f"‚úÖ ‡§¨‡•ç‡§∞‡•â‡§°‡§ï‡§æ‡§∏‡•ç‡§ü {count} ‡§Ø‡•Ç‡§ú‡§∞‡•ç‡§∏ ‡§ï‡•ã ‡§≠‡•á‡§ú‡§æ ‡§ó‡§Ø‡§æ")

def main():
    application = ApplicationBuilder().token(TOKEN).build()
    
    # Handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("check", check_membership))
    application.add_handler(CommandHandler("broadcast", broadcast))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_download))
    
    # Start the Bot
    application.run_polling()

if __name__ == '__main__':
    main()